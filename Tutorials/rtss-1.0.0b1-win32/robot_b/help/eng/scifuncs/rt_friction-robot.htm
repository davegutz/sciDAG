<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>robot/rt_friction</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 13/09/2009</div>
<p><b>robot/rt_friction</b> -   compute robot friction torque vector</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>tau_f = rt_friction(robot, qd)</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the n-link manipulator kinematics and dynamics.
       </li>
<li>
<tt><b>qd</b></tt>
       : n-element vector. A vector of joint velocities.
       </li>
<li>
<tt><b>tau_f</b></tt>
       : n-element vector. The resulting vector of joint friction torque.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl><dd>
<b></b><p>
     This function computes the joint friction torque vector for the robot object <tt><b>robot</b></tt> with a joint velocity vector <tt><b>qd</b></tt>.
     </p>
</dd></dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // The following example shows how rt_friction() can be used to compute
   // the joint friction torque vector for the Puma 560 robot
   exec &lt;PATH&gt;/models/rt_puma560.sce;       // load Puma 560 parameters
   qd = [0.5875, 0.0096, -0.3967, -1.4494, 0.8329, -0.5956],

   // compute vector of joint friction torque:
   // when q(i) &lt; 0, frict(i) = qd(i)*p560.links(i).B + p560.links(i).Tc(2)
   // when q(i) &gt; 0, frict(i) = qd(i)*p560.links(i).B + p560.links(i).Tc(1)
   frict = rt_friction(p560, qd),

   // i = 1 (q(i) &gt; 0)
   qd(1)*p560.links(1).B + p560.links(1).Tc(1),

   // i = 3 (q(i) &lt; 0)
   qd(3)*p560.links(3).B + p560.links(3).Tc(2),
   
  </pre>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_link.htm"><tt><b>rt_link</b></tt></a>,&nbsp;&nbsp;<a href="rt_nofriction-link.htm"><tt><b>link/rt_nofriction</b></tt></a>,&nbsp;&nbsp;<a href="rt_friction-link.htm"><tt><b>link/rt_friction</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;<a href="rt_nofriction-robot.htm"><tt><b>robot/rt_nofriction</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl><dd>
<b>Peter I. Corke</b>
    CSIRO Manufacturing Science and Technology
    </dd></dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
<p>
    M.W. Walker and D.E. Orin. Efficient dynamic computer simulation of robotic mechanisms. <em>ASME Journal of Dynamic Systems, Measurement and Control</em>, 104:205-211, 1982
    </p>
</body>
</html>
