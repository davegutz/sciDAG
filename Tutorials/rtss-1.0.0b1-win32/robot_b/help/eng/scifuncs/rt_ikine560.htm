<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_ikine560</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 15/09/2009</div>
<p><b>rt_ikine560</b> -   compute the inverse kinematics for a Puma 560 like robot arm</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>q = rt_ikine560(robot, T, config)</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the kinematics and dynamics for a Puma 560 like robot, that is all revolute 6DOF arms, with a spherical wrist.
       </li>
<li>
<tt><b>T</b></tt>
       : 4-by-4 matrix. It represents the location of the <tt><b>robot</b></tt> end-effector expressed with respect to the World coordinate frame, i.e. <tt><b>x = [1, 0, 0]</b></tt>, <tt><b>y = [0, 1, 0]</b></tt> and <tt><b>z = [0, 0, 1]</b></tt>.
       </li>
<li>
<tt><b>config</b></tt>
       : string. It contains one or more of the configuration control letter codes:
        <center><table border="1" cellpadding="8">
<tr align="center">
<td>"l"</td>
<td>left-handed (lefty) solution (default)</td>
</tr>
<tr align="center">
<td>"r"</td>
<td>right-handed (righty) solution</td>
</tr>
<tr align="center">
<td>"u"</td>
<td>elbow up solution (default)</td>
</tr>
<tr align="center">
<td>"d"</td>
<td>elbow down solution</td>
</tr>
<tr align="center">
<td>"f"</td>
<td>wrist flipped solution (default)</td>
</tr>
<tr align="center">
<td>"n"</td>
<td>wrist not flipped solution</td>
</tr>
</table></center>
</li>
<li>
<tt><b>q</b></tt>
       : 6-element row vector. The joint coordinates corresponding to the end-effector homogeneous transform <tt><b>T</b></tt>.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function returns the joint coordinates corresponding to the end-effector homogeneous transform <tt><b>T</b></tt>. It is computed using a symbolic solution appropriate for Puma 560 like robots, that is, all revolute 6DOF arms, with a spherical wrist. The use of a symbolic solution means that it executes over 50 times faster than <tt><b>rt_ikine</b></tt> for a Puma 560 solution.
     </p>
</dd>
<dd>
<b></b><p>
      A further advantage is that <tt><b>rt_ikine560</b></tt> allows control over the specified solution returned by using the string <tt><b>config</b></tt>.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // To show how the IKP (Inverse Kinematic Problem) for a Puma 560 can
   // be solved, the following code could be used.

   // load Puma 560 parameters
   exec &lt;PATH&gt;/models/rt_puma560.sce;

   // end-effector location for a generic joint state vector
   q = [0.2, -1.35, 0.65, 0, 1.4, 2.55],
   T06 = rt_fkine(p560, q),

   // solve the IKP
   Q1 = rt_ikine560(p560, T06, "rd"),       // ELBOW DOWN, SHOULDER FORE
   Q2 = rt_ikine560(p560, T06, "ru"),       // ELBOW UP, SHOULDER FORE
   Q3 = rt_ikine560(p560, T06, "ld"),       // ELBOW DOWN, SHOULDER AFT
   Q4 = rt_ikine560(p560, T06, "lu"),       // ELBOW UP, SHOULDER AFT

   // test solutions
   T06 - rt_fkine(p560, Q1),
   T06 - rt_fkine(p560, Q2),
   T06 - rt_fkine(p560, Q3),
   T06 - rt_fkine(p560, Q4),

   // The same solutions can be obtained in a more straightforward manner:
   Q = rt_ikine560paul(p560, T06);

   // Solve an IKP for a Puma 560 robot when the joint state vector has
   // q5 belonging to (-%pi, 0) radians
   q = [0.2, -1.35, 0.65, 0, -1.4, 2.55],   // q5 in (-%pi, 0)
   T06 = rt_fkine(p560, q),
   Q1 = rt_ikine560(p560, T06, "rdn"),      // Q1 == q

   Q = rt_ikine560paul(p560, T06),          // Q(1,4:6) is different from
                                            // q(4:6), however you should
                                            // know that they are
                                            // equivalent in their effects

   // Solve an IKP for a Puma 560 robot when the joint state vector is
   // a singular configuration for the robot
   L = p560.links;
   L(3).A = 0;                              // Puma 560 without..
   L(3).D = 0;                              // ..shoulder offset
   p560_2 = rt_robot(p560, L);              // robot copy
   p560_2.name = "Puma 560 (2)";
   q = [0, 0.3926991, %pi/4, 0, 0.2, 1];    // shoulder-singular config.
   T06 = rt_fkine(p560_2, q),               // compute end-effector location
   Q = rt_ikine560(p560_2, T06, "lu"),      // no warning displayed
   Q = rt_ikine560paul(p560_2, T06),        // warns you about singularity

  </pre>
<h3><font color="blue">Cautionary</font></h3>
<dl>
<dd>
<b></b><p>
     Note that the dimensional units for the last column of the <tt><b>T</b></tt> matrix must agree with the dimensional units used in the robot object <tt><b>robot</b></tt>. The units can be whatever you choose (metres, inches, cubits or furlongs) but they must be consistent. The toolbox definitions <tt><b>rt_puma560</b></tt> and <tt><b>rt_stanford</b></tt> all use SI units with dimensions in metres.
     </p>
</dd>
<dd>
<b></b><p>
     This function will not work for robot objects that use the modified Denavit-Hartenberg convention.
     </p>
</dd>
</dl>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_ikine.htm"><tt><b>rt_ikine</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikine560paul.htm"><tt><b>rt_ikine560paul</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikinestanfpaul.htm"><tt><b>rt_ikinestanfpaul</b></tt></a>,&nbsp;&nbsp;<a href="rt_fkine.htm"><tt><b>rt_fkine</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;<a href="rt_plot-robot.htm"><tt><b>robot/rt_plot</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl>
<dd>
<b>Robert Biro</b>
    Georgia Institute of Technology &lt;gt2231a@prism.gatech.edu&gt;
    </dd>
<dd>
<b>Gary Von McMurray</b>
    Georgia Institute of Technology
    </dd>
</dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
<p>
    R. P. Paul and H. Zhang, "Computationally efficient kinematics for manipulators with spherical wrists", <em>Int. J. Robot. Res.</em>, vol 5, no. 2, pp. 32-44, 1986.
    </p>
</body>
</html>
