<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_ikinestanfpaul</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 13/09/2009</div>
<p><b>rt_ikinestanfpaul</b> -   compute all solutions for the inverse kinematics of a Stanford like robot arm using the Paul's algebraic method</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>Q = rt_ikinestanfpaul(robot, T06)</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the kinematics and dynamics for a Stanford like robot arm. In particular, the <tt><b>robot</b></tt>'s standard Denavit-Hartenberg kinematic parameters have to be as follows:
        <center><table border="1" cellpadding="8">
<tr align="center">
<td></td>
<td>alpha</td>
<td>A</td>
<td>theta</td>
<td>D</td>
<td>joint type</td>
</tr>
<tr align="center">
<td>link 1</td>
<td>-%pi/2</td>
<td>0</td>
<td>arbitrary</td>
<td>arbitrary</td>
<td>R</td>
</tr>
<tr align="center">
<td>link 2</td>
<td>%pi/2</td>
<td>0</td>
<td>arbitrary</td>
<td>not 0</td>
<td>R</td>
</tr>
<tr align="center">
<td>link 3</td>
<td>0</td>
<td>0</td>
<td>0 or -%pi/2</td>
<td>arbitrary</td>
<td>P</td>
</tr>
<tr align="center">
<td>link 4</td>
<td>-%pi/2</td>
<td>0</td>
<td>arbitrary</td>
<td>0</td>
<td>R</td>
</tr>
<tr align="center">
<td>link 5</td>
<td>%pi/2</td>
<td>0</td>
<td>arbitrary</td>
<td>0</td>
<td>R</td>
</tr>
<tr align="center">
<td>link 6</td>
<td>0</td>
<td>0</td>
<td>arbitrary</td>
<td>not 0</td>
<td>R</td>
</tr>
</table></center>
</li>
<li>
<tt><b>T06</b></tt>
       : 4-by-4 matrix. It represents the location of the <tt><b>robot</b></tt> end-effector expressed with respect to the World coordinate frame, i.e. <tt><b>x = [1, 0, 0]</b></tt>, <tt><b>y = [0, 1, 0]</b></tt> and <tt><b>z = [0, 0, 1]</b></tt>.
       </li>
<li>
<tt><b>Q</b></tt>
       : 2-by-6 matrix. This matrix is formed by appropriately stacking of all the 2 joint configurations which move the <tt><b>robot</b></tt> end-effector to the given position and orientation described by <tt><b>T06</b></tt>.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function returns all the 2 joint coordinates corresponding to the end-effector homogeneous transform <tt><b>T06</b></tt>. The <tt><b>robot</b></tt>'s base can be arbitrarily specified within the robot object. Joint coordinates are computed using the symbolic solution of algebraic method described by Paul for Stanford like manipulators, that is R-R-P-R-R-R serial chains with a sperichal wrist. The use of a symbolic solution means that it executes over XX times faster than rt_ikine() for a Stanford arm solution.
     </p>
</dd>
<dd>
<b></b><p>
      A further advantage is that rt_ikinestanfpaul() can identify singular configurations which lead to infinitely many solutions for the inverse kinematics problem and it informs the user about them displaying a warning.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // To show how the IKP (Inverse Kinematic Problem) for a Stanford arm can
   // be solved, the following code could be used.

   // load Stanford arm parameters
   exec &lt;PATH&gt;/models/rt_stanford.sce;

   // end-effector location for a generic joint state vector
   q = [-0.565, 0.628, 0.754, -1.047, 0.628, -1.131],
   T06 = rt_fkine(stanf, q),

   // solve the IKP
   Q = rt_ikinestanfpaul(stanf, T06),

   // test solutions
   T06 - rt_fkine(stanf, Q(1,:)),
   T06 - rt_fkine(stanf, Q(2,:)),

   // plot solutions
   stanf_1 = rt_robot(stanf); stanf_1.name = "Stanford Arm (1)"; // rob copy
   stanf_2 = rt_robot(stanf); stanf_2.name = "Stanford Arm (2)"; // rob copy
   h0 = scf(0); a0 = h0.children;
   a0.tight_limits = "on"; a0.rotation_angles = [66, -61];
   h1 = scf(1); a1 = h1.children;
   a1.tight_limits = "on"; a1.rotation_angles = [66, -61];

   scf(0); rt_plot(stanf_1, Q(1,:));         // Q(1,:)
   scf(1); rt_plot(stanf_2, Q(2,:));         // Q(2,:)

   // solve the IKP for a Stanford arm with a modified base frame config.
   stanf_1.base = rt_transl(0.5, 0, 0);     // modify stanf_1 base
   T06 = rt_fkine(stanf_1, q),              // compute end-effector location
   Q = rt_ikinestanfpaul(stanf_1, T06),     // solve the IKP
   T06 - rt_fkine(stanf_1, Q(1,:)),         // test solutions
   T06 - rt_fkine(stanf_1, Q(2,:)),

   // solution's feasibilty in presence of joint limits
   stanf_1.qlim = [ -%pi/2, %pi/2;..        // set joint coordinate limits
                    -%pi/2, %pi/2;..        // (compatibles with q)
                    0,      1;..
                    -%pi/2, %pi/2;..
                    -%pi/2, %pi/2;..
                    -%pi/2, %pi/2];
   stanf_1.islimit(Q(1,:).'),               // workable joint state vector
   stanf_1.islimit(Q(2,:).'),               // joint limits exceeded!

   // Note that, in both cases, the starting joint state vector (the state
   // vector with which T06 has been computed) has been returned as a
   // solution to the IKP (Q(1,:)). However, there are many cases in which
   // this can not occur.
   // Following examples are intended to illustrate some of these
   // situations.

   // When the starting joint state vector has q5 belonging to (-%pi, 0)
   // radians it will be not returned as a solution, since the configuration
   // of last three joints of robot coincides with a set of Euler angles and
   // rt_ikinestanfpaul() computes the solution reducing the range to whom
   // q5 belongs to (0, %pi) radians.
   // (See help of rt_tr2eul() function for further details).
   q = [0, 0.62, 0.7, -1.04, -0.62, -1.4],  // q5 in (-%pi, 0)
   T06 = rt_fkine(stanf, q),                // compute end-effector location

   Q = rt_ikinestanfpaul(stanf, T06),       // solve the IKP:
                                            // Q(1,4:6) is different from
                                            // q(4:6), but they are
                                            // equivalent in their effects

   // When the starting joint state vector is a singular configuration for
   // the robot then it could not be returned as a solution to the IKP.
   // Note that rt_ikinestanfpaul() can identify singular configurations
   // which lead to infinitely many solutions for the IKP and it informs you
   // about them displaying a warning.
   // You can use the following code to experience yourself with this.
   q = [-0.45, 1.25, 0.7, 1.4, 0, -1];      // wrist-singular config.
   T06 = rt_fkine(stanf, q),                // compute end-effector location
   Q = rt_ikinestanfpaul(stanf, T06),       // q does not appear in Q

   q = [-0.45, 0, 0.7, 1.4, 0.65, -1];      // elbow singularity
   T06 = rt_fkine(stanf, q),                // This config doesn't lead to
   Q = rt_ikinestanfpaul(stanf, T06),       // infinitely many solutions,
                                            // therefore no warning is shown
   
  </pre>
<h3><font color="blue">Cautionary</font></h3>
<dl>
<dd>
<b></b><p>
     Note that the dimensional units for the last column of the <tt><b>T06</b></tt> matrix must agree with the dimensional units used in the robot object <tt><b>robot</b></tt>. The units can be whatever you choose (metres, inches, cubits or furlongs) but they must be consistent. The toolbox definitions <tt><b>rt_puma560</b></tt> and <tt><b>rt_stanford</b></tt> all use SI units with dimensions in metres.
     </p>
</dd>
<dd>
<b></b><p>
     This function will not work for robot objects that use the modified Denavit-Hartenberg convention.
     </p>
</dd>
</dl>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_drivebot.htm"><tt><b>rt_drivebot</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikine.htm"><tt><b>rt_ikine</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikine560.htm"><tt><b>rt_ikine560</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikine560paul.htm"><tt><b>rt_ikine560paul</b></tt></a>,&nbsp;&nbsp;<a href="rt_fkine.htm"><tt><b>rt_fkine</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;<a href="rt_tr2eul.htm"><tt><b>rt_tr2eul</b></tt></a>,&nbsp;&nbsp;<a href="rt_plot-robot.htm"><tt><b>robot/rt_plot</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Author</font></h3>
<dl><dd>
<b>Matteo Morelli</b>
    Interdepartmental Research Center "E. Piaggio", University of Pisa
  </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    R. P. Paul, <em>Robot Manipulators: Mathematics, Programming and Control.</em>   Cambridge, Massachusetts: MIT Press, 1981.
    </p>
<p>
        L. Sciavicco, B. Siciliano, <em>Modelling and Control of Robot Manipulators.</em>   2nd Edition,  Springer-Verlag Advanced Textbooks in Control and Signal Processing Series, London, UK, 2000.
      </p>
</body>
</html>
