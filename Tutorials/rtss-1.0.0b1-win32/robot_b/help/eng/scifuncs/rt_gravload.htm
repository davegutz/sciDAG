<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_gravload</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 13/09/2009</div>
<p><b>rt_gravload</b> -   compute the manipulator gravity torque components</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>tau_g = rt_gravload(robot, q [, grav])</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. The n-link manipulator for which gravity torque components will be computed.
       </li>
<li>
<tt><b>q</b></tt>
       : p-by-n matrix (p is arbitrary). Each row in <tt><b>q</b></tt> represents a joint state vector for the robot <tt><b>robot</b></tt>.
       </li>
<li>
<tt><b>grav</b></tt>
       : 3-element vector. It represents an alternative direction for gravity which will override the default one.
       </li>
<li>
<tt><b>tau_g</b></tt>
       : p-by-n matrix. Each row in <tt><b>tau_g</b></tt> is the gravity torque for the corresponding row in <tt><b>q</b></tt>.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function computes the joint torque due to gravity for the manipulator in pose <tt><b>q</b></tt>. If <tt><b>q</b></tt> is a row vector (p = 1), <tt><b>tau_g</b></tt> returns a row vector of joint torques. If <tt><b>q</b></tt> is a matrix (p &gt; 1) each row is interpreted as a joint state vector, and <tt><b>tau_g</b></tt> is a matrix in which each row is the gravity torque for the corresponding row in <tt><b>q</b></tt>.
     </p>
</dd>
<dd>
<b></b><p>
      The default gravity direction comes from the robot object <tt><b>robot</b></tt>, but may be overridden by the optional <tt><b>grav</b></tt> argument.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // Consider the example of a path which will move the Puma robot from its
   // zero-angle pose to the "ready" pose.
   exec &lt;PATH&gt;/models/rt_puma560.sce;      // load Puma 560 parameters
   t = [0:0.056:2];                        // motion in 2s(sample time 56ms)
   [q, qd, qdd] = rt_jtraj(qz, qready, t); // path

   // The required joint torques for each point of the trajectory are given
   // by
   tic(); tau = rt_frne(p560, q, qd, qdd); toc(),

   // Much of the torque on joints 2 and 3 of this robot is due to gravity.
   // That component can be computed separately
   tic(); taug = rt_gravload(p560, q); toc(),

   // and plotted by using standard Scilab plotting commands
   cfh = scf();
   drawlater();
   subplot(2,1,1); plot(t, [tau(:,2), taug(:,2)]);
   xgrid(); xtitle("", "Time (s)", "Torque on joint 2 (Nm)");
   a0 = cfh.children(1); a0.data_bounds = [0 -20; t($) 80];
   a0.tight_limits = "on"; a0.auto_ticks = ["off" "off" "off"];
   a0.x_ticks = tlist(["ticks", "locations", "labels"],..
        [0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8],..
        ["0" "0.2" "0.4" "0.6" "0.8" "1" "1.2" "1.4" "1.6" "1.8"]);
   a0.y_ticks = tlist(["ticks", "locations", "labels"],..
        [-20 0 20 40 60 80], ["-20" "0" "20" "40" "60" "80"]);
   subplot(2,1,2); plot(t, [tau(:,3), taug(:,3)]);
   xgrid(); xtitle("", "Time (s)", "Torque on joint 3(Nm)");
   a1 = cfh.children(1); a1.data_bounds = [0 0; t($) 8];
   a1.tight_limits = "on"; a1.auto_ticks = ["off" "off" "off"];
   a1.x_ticks = tlist(["ticks", "locations", "labels"],..
        [0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8],..
        ["0" "0.2" "0.4" "0.6" "0.8" "1" "1.2" "1.4" "1.6" "1.8"]);
   a1.y_ticks = tlist(["ticks", "locations", "labels"],..
        [0 2 4 6 8], ["0" "2" "4" "6" "8"]);
   drawnow();
   
  </pre>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;<a href="rt_link.htm"><tt><b>rt_link</b></tt></a>,&nbsp;&nbsp;<a href="rt_frne.htm"><tt><b>rt_frne</b></tt></a>,&nbsp;&nbsp;<a href="rt_rne.htm"><tt><b>rt_rne</b></tt></a>,&nbsp;&nbsp;<a href="rt_itorque.htm"><tt><b>rt_itorque</b></tt></a>,&nbsp;&nbsp;<a href="rt_coriolis.htm"><tt><b>rt_coriolis</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl><dd>
<b>Peter I. Corke</b>
    CSIRO Manufacturing Science and Technology
    </dd></dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
<p>
    M.W. Walker and D.E. Orin. Efficient dynamic computer simulation of robotic mechanisms. <em>ASME Journal of Dynamic Systems, Measurement and Control</em>, 104:205-211, 1982
    </p>
</body>
</html>
