<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_drivebot</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 15/09/2009</div>
<p><b>rt_drivebot</b> -   drive a graphical robot</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>rt_drivebot(robot [, q])</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the n-link manipulator kinematics and dynamics.
       </li>
<li>
<tt><b>q</b></tt>
       : n-element column vector. The <tt><b>robot</b></tt>'s initial joint angle state.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function pops up a window with one slider for each joint. Operation of the sliders will drive the graphical robot on the screen. Very useful for gaining and understanding of joint limits and robot workspace.
     </p>
</dd>
<dd>
<b></b><p>
      The joint coordinate state is kept with the graphical robot and can be obtained using the <tt><b>rt_plot</b></tt> function. If <tt><b>q</b></tt> is specified it is used as the initial joint angle, otherwise the initial value of joint coordinates is taken from the graphical robot.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // following code could be used to drive a Puma 560 robot.
   exec &lt;PATH&gt;/models/rt_puma560.sce;       // define the robot

   h0 = scf(0); a0 = h0.children;
   a0.tight_limits = "on";
   a0.rotation_angles = [77, -50];
   rt_plot(p560, qz);                       // draw it

   rt_drivebot(p560);                       // now drive it!

   // The following example shows how certain configurations may lead to
   // infinitely many solutions for the Inverse Kinematic Problem (IKP)
   L = p560.links;
   L(3).A = 0;                              // Puma 560 without..
   L(3).D = 0;                              // ..shoulder offset
   p560_2 = rt_robot(p560, L);              // robot copy
   p560_2.name = "Puma 560 (2)";            // different name

   // It is known that when the wrist's frame origin lies on the axis of
   // the first revolute joint, we can actuate the joint itself with any
   // arbitrary value but the origin of the wrist frame won't move.
   q = [0, 0.3926991, %pi/4, 0, 0.2, 1];    // shoulder-singular config.
   rt_drivebot(p560_2, q);                  // changes to value of the
                                            // slider1 only, don't move
                                            // the wrist's frame origin

  </pre>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_ikine560paul.htm"><tt><b>rt_ikine560paul</b></tt></a>,&nbsp;&nbsp;<a href="rt_plot-robot.htm"><tt><b>robot/rt_plot</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl><dd>
<b>Peter I. Corke</b>
    CSIRO Manufacturing Science and Technology
    </dd></dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
</body>
</html>
