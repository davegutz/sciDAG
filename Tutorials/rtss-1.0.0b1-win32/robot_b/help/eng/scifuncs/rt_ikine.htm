<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_ikine</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 13/09/2009</div>
<p><b>rt_ikine</b> -   compute the inverse kinematics for a generic serial n-link manipulator</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>q = rt_ikine(robot, T [, q0 [, M]])</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the n-link manipulator kinematics and dynamics.
       </li>
<li>
<tt><b>T</b></tt>
       : 4-by-4-by-m hypermatrix (m is arbitrary). Each entry in this m-dimensional array represents the location of the <tt><b>robot</b></tt> end-effector expressed with respect to the World coordinate frame, i.e. <tt><b>x = [1, 0, 0]</b></tt>, <tt><b>y = [0, 1, 0]</b></tt> and <tt><b>z = [0, 0, 1]</b></tt>.
       </li>
<li>
<tt><b>q0</b></tt>
       : n-element vector. It represents the starting point for computing the solution.
       </li>
<li>
<tt><b>M</b></tt>
       6-element vector. This vector should be used when <tt><b>robot</b></tt> has n &lt; 6. It represents a weighting vector whose element are 0 for those Cartesian DOF that are unconstrained and 1 otherwise. The number of non-zero elements should be equal to n.
       </li>
<li>
<tt><b>q</b></tt>
       : m-by-n matrix. Each row of this matrix is a joint state vector for the corresponding entry in <tt><b>T</b></tt>.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function returns the joint coordinates for the manipulator described by the object <tt><b>robot</b></tt> whose end-effector homogeneous transform is given by <tt><b>T</b></tt>. Note that the <tt><b>robot</b></tt>'s base can be arbitrarily specified within the robot object.
     </p>
</dd>
<dd>
<b></b><p>
      If <tt><b>T</b></tt> is a homogeneous transform (m = 1) then a row vector of joint coordinates is returned. The estimate for the first step is <tt><b>q0</b></tt> if this is given else is <tt><b>zeros(n,1)</b></tt>.
     </p>
</dd>
<dd>
<b></b><p>
      If <tt><b>T</b></tt> is a homogeneous transform trajectory (m &gt; 1) then each row in <tt><b>q</b></tt> will be a vector of joint coordinates corresponding to the last subscript of <tt><b>T</b></tt>. The estimate for the first step is <tt><b>q0</b></tt> if this is given else is <tt><b>zeros(n,1)</b></tt>. The initial estimate of <tt><b>q</b></tt> for each time step is taken as the solution from the previous time step.
     </p>
</dd>
<dd>
<b></b><p>
      Note that the inverse kinematic solution is generally not unique, and depends on the initial value <tt><b>q0</b></tt> (which defaults to <tt><b>zeros(1,n)</b></tt>).
     </p>
</dd>
<dd>
<b></b><p>
      For the case of a manipulator with fewer than 6 DOF it is not possible for the end-effector to satisfy the end-effector pose specified by an arbitrary homogeneous transform. This tipically leads to non-convergence in <tt><b>rt_ikine</b></tt>. A solution is to specify a 6-element weighting vector, <tt><b>M</b></tt>, whose elements are 0, for those Cartesian DOF that are uncostrained and 1 otherwise. The elements correspond to translation along the X-, Y- and Z-axes and rotation about the X-, Y- and Z-axes respectively. For example, a 5-axis manipulator may be incapable of independantly controlling rotation about the end-effector's Z-axis. In this case <tt><b>M = [1, 1, 1, 1, 1, 0]</b></tt> would enable a solution in which the end-effector adopted the pose <tt><b>T</b></tt><em>except</em> for the end-effector rotation. The number of non-zero elements should equal the number of <tt><b>robot</b></tt>'s DOF.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // IKP (Inverse Kinematic Problem) for a Puma 560. Note that for such
   // manipulators you should use specific inverse kinematic solutions
   // derived symbolically (rt_ikine560() and rt_ikine560paul()).
   exec &lt;PATH&gt;/models/rt_puma560.sce;           // load Puma 560 parameters

   // T is a homogeneous transform
   q = [0, -%pi/4, -%pi/4, 0, %pi/8, 0];        // joint state vector
   T = rt_fkine(p560, q);                       // compute end-effector pose
   tic(); Q = rt_ikine(p560, T); toc(),         // solve the IKP
   tic(); Q = rt_ikine560(p560, T); toc(),      // use a symbolic solution
   tic(); Q = rt_ikine560paul(p560, T); toc(),  // compute all solutions

   // T is a trajectory
   t = [0:.056:2];                              // create a time vector
   T1 = rt_transl(0.6, -0.5, 0.0),              // define the start point
   T2 = rt_transl(0.4, 0.5, 0.2),               // and destination
   T = rt_ctraj(T1, T2, length(t));             // compute a Cartesian path
   Q = rt_ikine(p560, T);                       // solve the IKP

   // To show how the IKP for a simple 3R planar (lying on X-Y plane) can
   // be solved, the following code could be used.
   // Note that this manipulator has less than 6 DOF therefore a mask should
   // be specified. The robot is able to move its end-effector to any
   // position in the X-Y plane (inside its reachable workspace) and
   // orientation (about the Z-axis), so the mask will be
   // M = [M_position, M_orientation] where M_position = [1, 1, 0] and
   // M_orientation = [0, 0, 1].
   // build a simple 3R planar and its mask. Then compute the end-effector
   // pose
   l = rt_link([0, 1, 0, 0, 0], "stand");
   r = rt_robot(list(l,l,l), "3R plan.");
   M = [1, 1, 0, 0, 0, 1];                      // mask
   q = [-0.5, 0.85, -0.22];                     // generic joint state vect.
   T = rt_fkine(r, q);                          // end-effector pose

   // solve the IKP:
   // a) when q0 = [0, 0, 0], returned joint angles are in non-minimum form
   //    and differ from values in q
   Q = rt_ikine(r, T, [0, 0, 0], M);
   Q1 = modulo(Q, 2*%pi*[1, 1, 1]);             // adjust joint values
   // b) when q0 = [-0.2, 0, 0], returned solution is equal to q
   Q = rt_ikine(r, T, [-0.2, 0, 0], M);         // Q == q

   // test solutions
   rt_fkine(r, Q) - rt_fkine(r, Q1),            // T(Q) == T(Q1)

   // plot solutions
   r_1 = rt_robot(r);
   r_1.name = "3R plan. (1)";                   // robot copy
   h0 = scf(0); a0 = h0.children;
   a0.tight_limits = "on"; a0.rotation_angles = [0, -90];
   scf(0); rt_plot(r, Q);
   rt_plot(r_1, Q1);

  </pre>
<h3><font color="blue">Cautionary</font></h3>
<dl>
<dd>
<b></b><p>
     Such a solution is completely general, though much less efficient than specific inverse kinematic solutions derived symbolically.
     </p>
</dd>
<dd>
<b></b><p>
     The returned joint angles may be in non-minimum form, i.e. q + 2*n*%pi.
     </p>
</dd>
<dd>
<b></b><p>
     This approach allows a solution to be obtained at a singularity, but the joint coordinates whitin the null space are arbitrarily assigned.
     </p>
</dd>
<dd>
<b></b><p>
     Note that the dimensional units for the last column of the <tt><b>T</b></tt> matrix must agree with the dimensional units used in the robot object <tt><b>robot</b></tt>. The units can be whatever you choose (metres, inches, cubits or furlongs) but they must be consistent. The toolbox definitions <tt><b>rt_puma560</b></tt> and <tt><b>rt_stanford</b></tt> all use SI units with dimensions in metres.
     </p>
</dd>
</dl>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_ikine560.htm"><tt><b>rt_ikine560</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikine560paul.htm"><tt><b>rt_ikine560paul</b></tt></a>,&nbsp;&nbsp;<a href="rt_ikinestanfpaul.htm"><tt><b>rt_ikinestanfpaul</b></tt></a>,&nbsp;&nbsp;<a href="rt_fkine.htm"><tt><b>rt_fkine</b></tt></a>,&nbsp;&nbsp;<a href="rt_tr2diff.htm"><tt><b>rt_tr2diff</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;<a href="rt_plot-robot.htm"><tt><b>robot/rt_plot</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl><dd>
<b>Peter I. Corke</b>
    CSIRO Manufacturing Science and Technology
    </dd></dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
<p>
    S. Chiaverini, L. Sciavicco and B. Siciliano, "Control of robotic systems through singularities", in <em>Proc. Int. Workshop on Nonlinear and Adaptive Control: Issues in Robotics</em>, (C. C. de Wit ed.), Springer-Verlag, 1991.
    </p>
</body>
</html>
