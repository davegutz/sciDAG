<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>rt_fkine</title>
</head>
<body bgcolor="#FFFFFF">
<center>Scilab Function  </center>
<div align="right">Last update : 13/09/2009</div>
<p><b>rt_fkine</b> -   compute the forward kinematics for a serial n-link manipulator</p>
<h3><font color="blue">Calling Sequence</font></h3>
<dl><dd><tt>T = rt_fkine(robot, q)</tt></dd></dl>
<h3><font color="blue">Parameters</font></h3>
<ul>
<li>
<tt><b>robot</b></tt>
       : robot object. It describes the n-link manipulator kinematics and dynamics.
       </li>
<li>
<tt><b>q</b></tt>
       : p-by-n matrix (p is arbitrary). Each row of this matrix is interpreted as a joint state vector.
       </li>
<li>
<tt><b>T</b></tt>
       : 4-by-4-by-p hypermatrix. Each entry in this hypermatrix is the resulting homogeneous transform for the corresponding row in <tt><b>q</b></tt>.
       </li>
</ul>
<h3><font color="blue">Description</font></h3>
<dl>
<dd>
<b></b><p>
      This function computes forward kinematics for the joint coordinates <tt><b>q</b></tt> giving a homogeneous tranform for the location of the end-effector. <tt><b>robot</b></tt> is a robot object which contains a kinematic model in either standard or modified Denavit-Hartenberg notation. Note that the robot object can specify an arbitrary homogeneous transform for the base of the robot.
     </p>
</dd>
<dd>
<b></b><p>
      If <tt><b>q</b></tt> is a vector (p = 1) it is interpreted as the generalized joint coordinates, and <tt><b>rt_fkine</b></tt> returns a homogeneous transformation for the final link of the manipulator. If <tt><b>q</b></tt> is a matrix (p &gt; 1) each row is interpreted as a joint state vector and <tt><b>T</b></tt> is a p-dimensional array in which each entry is the resulting homogeneous transform for the corresponding row in <tt><b>q</b></tt>.
     </p>
</dd>
</dl>
<h3><font color="blue">Examples</font></h3>
<pre>
   // To show how the FKP (Forward Kinematic Problem) for a Puma 560 can
   // be solved, the following code could be used.

   // load Puma 560 parameters
   exec &lt;PATH&gt;/models/rt_puma560.sce;

   // forward kinematic computation:
   // q is a joint state vector
   Tz = rt_fkine(p560, qz);     // joint coordinates are zero
   disp(Tz);                    // display the end-effector location

   // q is a trajectory in the joint space
   t = [0:.056:5].';            // time vector
   q = rt_jtraj(qz, qready, t); // create a path
   T = rt_fkine(p560, q);       // trajectory from qz to qready
   disp(T(:,:,1));              // display e.e. location when q is qz
                                // (note that is the same of Tz)
   disp(T(:,:,10));             // display e.e. location for the 10th
                                // point in trajectory
   
  </pre>
<h3><font color="blue">Cautionary</font></h3>
<dl><dd>
<b></b><p>
     Note that the dimensional units for the last column of the <tt><b>T</b></tt> matrix will be the same as the dimensional units used in the robot object <tt><b>robot</b></tt>. The units can be whatever you choose (metres, inches, cubits or furlongs) but the choice will affect the numerical value of the elements in the last column of <tt><b>T</b></tt>. The toolbox definitions <tt><b>rt_puma560</b></tt> and <tt><b>rt_stanford</b></tt> all use SI units with dimensions in metres.
     </p>
</dd></dl>
<h3><font color="blue">See Also</font></h3>
<p><a href="rt_link.htm"><tt><b>rt_link</b></tt></a>,&nbsp;&nbsp;<a href="rt_robot.htm"><tt><b>rt_robot</b></tt></a>,&nbsp;&nbsp;</p>
<h3><font color="blue">Authors</font></h3>
<h4><font color="maroon">original Matlab version by</font></h4>
<dl><dd>
<b>Peter I. Corke</b>
    CSIRO Manufacturing Science and Technology
    </dd></dl>
<h4><font color="maroon">Scilab implementation by</font></h4>
<dl><dd>
<b>Matteo Morelli</b>
      Interdepartmental Research Center "E. Piaggio", University of Pisa
    </dd></dl>
<h3><font color="blue">Bibliography</font></h3>
<p>
    Corke, P.I. "A Robotics Toolbox for MATLAB", <em>IEEE Robotics and Automation Magazine</em>, Volume 3(1), March 1996, pp. 24-32
    </p>
<p>
    R. P. Paul, <em>Robot Manipulators: Mathematics, Programming and Control.</em>   Cambridge, Massachusetts: MIT Press, 1981.
    </p>
<p>
    J. J. Craig, <em>Introduction to Robotics.</em>   Addison Wesley, second ed., 1989.
    </p>
</body>
</html>
